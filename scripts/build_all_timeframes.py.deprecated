#!/usr/bin/env python3
"""
Build all timeframes from 1-minute candles
Simple aggregation: 1m → 5m → 15m → 30m → 1h → 4h → 1d
"""

import requests
import sys

QUESTDB_URL = "http://localhost:9000/exec"

def execute_query(query):
    """Execute a query against QuestDB"""
    response = requests.get(QUESTDB_URL, params={'query': query})
    if response.status_code != 200:
        print(f"Error: {response.text}")
        return False
    print("✓")
    return True

def build_timeframe(source_table, target_table, sample_by):
    """Build a higher timeframe from a lower one"""
    print(f"Building {target_table} from {source_table}... ", end='', flush=True)
    
    # Clear target table
    execute_query(f"TRUNCATE TABLE {target_table}")
    
    # Aggregate from source
    query = f"""
    INSERT INTO {target_table}
    SELECT 
        timestamp,
        symbol,
        FIRST(open) as open,
        MAX(high) as high,
        MIN(low) as low,
        LAST(close) as close,
        SUM(volume) as volume,
        SUM(tick_count) as tick_count,
        AVG(vwap) as vwap,
        'AGGREGATED' as trading_session
    FROM {source_table}
    SAMPLE BY {sample_by} ALIGN TO CALENDAR
    """
    
    return execute_query(query)

def main():
    print("=== Building All Timeframes from 1-minute Candles ===\n")
    
    # Check we have 1-minute data
    response = requests.get(QUESTDB_URL, params={
        'query': 'SELECT COUNT(*) as count FROM ohlc_1m_v2'
    })
    if response.status_code != 200:
        print("Error: Cannot connect to QuestDB")
        sys.exit(1)
    
    data = response.json()
    candle_count = data['dataset'][0][0]
    print(f"Starting with {candle_count:,} one-minute candles\n")
    
    # Build each timeframe from the previous
    aggregations = [
        # (source_table, target_table, sample_by)
        ('ohlc_1m_v2', 'ohlc_5m_v2', '5m'),      # 1m → 5m
        ('ohlc_5m_v2', 'ohlc_15m_v2', '15m'),    # 5m → 15m (3x5)
        ('ohlc_15m_v2', 'ohlc_30m_v2', '30m'),   # 15m → 30m (2x15)
        ('ohlc_30m_v2', 'ohlc_1h_v2', '1h'),     # 30m → 1h (2x30)
        ('ohlc_1h_v2', 'ohlc_4h_v2', '4h'),      # 1h → 4h (4x1)
        ('ohlc_4h_v2', 'ohlc_1d_v2', '1d'),      # 4h → 1d (6x4)
    ]
    
    for source, target, sample in aggregations:
        if not build_timeframe(source, target, sample):
            print(f"Failed to build {target}")
            sys.exit(1)
    
    # Show results
    print("\n✅ All timeframes built successfully!\n")
    print("Candle counts:")
    
    tables = ['ohlc_1m_v2', 'ohlc_5m_v2', 'ohlc_15m_v2', 'ohlc_30m_v2', 
              'ohlc_1h_v2', 'ohlc_4h_v2', 'ohlc_1d_v2']
    
    for table in tables:
        response = requests.get(QUESTDB_URL, params={
            'query': f'SELECT COUNT(*) FROM {table}'
        })
        if response.status_code == 200:
            count = response.json()['dataset'][0][0]
            print(f"  {table}: {count:,} candles")

if __name__ == "__main__":
    main()